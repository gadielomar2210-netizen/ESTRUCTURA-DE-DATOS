import tkinter as tk
from tkinter import messagebox

class Pila:
    def __init__(self):
        self.items = []

    def esta_vacia(self):
        return len(self.items) == 0

    def apilar(self, item):
        self.items.append(item)

    def desapilar(self):
        if not self.esta_vacia():
            return self.items.pop()
        return None

    def cima(self):
        return self.items[-1] if not self.esta_vacia() else None

    def tamano(self):
        return len(self.items)

# ---------------- INTERFAZ GRÁFICA ----------------

class PilaGUI:
    def __init__(self, root):
        self.pila = Pila()
        self.root = root
        self.root.title("Visualizador de Pila (Stack LIFO)")
        self.root.geometry("400x500")
        self.root.config(bg="#f4f4f4")

        # Entrada
        self.entry = tk.Entry(root, font=("Arial", 14))
        self.entry.pack(pady=10)

        # Botones
        botones_frame = tk.Frame(root, bg="#f4f4f4")
        botones_frame.pack(pady=10)

        tk.Button(botones_frame, text="Apilar", command=self.apilar, width=10, bg="#4CAF50", fg="white").grid(row=0, column=0, padx=5)
        tk.Button(botones_frame, text="Desapilar", command=self.desapilar, width=10, bg="#E53935", fg="white").grid(row=0, column=1, padx=5)
        tk.Button(botones_frame, text="Ver Cima", command=self.ver_cima, width=10, bg="#2196F3", fg="white").grid(row=0, column=2, padx=5)

        # Área gráfica de la pila
        self.canvas = tk.Canvas(root, width=300, height=350, bg="white")
        self.canvas.pack(pady=20)

        self.actualizar_pila()

    def apilar(self):
        valor = self.entry.get()
        if valor:
            self.pila.apilar(valor)
            self.entry.delete(0, tk.END)
            self.actualizar_pila()
        else:
            messagebox.showwarning("Advertencia", "Ingresa un valor para apilar.")

    def desapilar(self):
        elemento = self.pila.desapilar()
        if elemento is not None:
            messagebox.showinfo("Desapilado", f"Elemento '{elemento}' eliminado.")
            self.actualizar_pila()
        else:
            messagebox.showwarning("Advertencia", "La pila está vacía.")

    def ver_cima(self):
        cima = self.pila.cima()
        if cima is not None:
            messagebox.showinfo("Cima de la Pila", f"Cima: '{cima}'")
        else:
            messagebox.showwarning("Advertencia", "La pila está vacía.")

    def actualizar_pila(self):
        self.canvas.delete("all")
        items = self.pila.items[::-1]  # Mostrar de arriba a abajo
        x0, y0 = 50, 50
        width, height = 200, 40

        for i, item in enumerate(items):
            y = y0 + i * (height + 5)
            self.canvas.create_rectangle(x0, y, x0 + width, y + height, fill="#90CAF9")
            self.canvas.create_text(x0 + width/2, y + height/2, text=item, font=("Arial", 14, "bold"))

# ---------------- INICIAR APP ----------------

if __name__ == "__main__":
    root = tk.Tk()
    app = PilaGUI(root)
    root.mainloop()
